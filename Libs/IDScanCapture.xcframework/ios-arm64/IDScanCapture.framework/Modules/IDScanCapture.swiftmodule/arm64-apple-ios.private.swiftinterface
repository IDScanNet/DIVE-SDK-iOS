// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name IDScanCapture
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import ARKit
import Accelerate
import AudioToolbox
import CoreImage
import CoreMedia
import DeveloperToolsSupport
import Foundation
import IDScanMRZDetector
import IDScanPDFDetector
import Swift
import SwiftUI

import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct CaptureConfiguration {
  public init(json: [Swift.String : Any])
}
public struct IDScanIDCaptureTheme {
  public let accentColor: UIKit.UIColor
  public let fontSizeModifier: CoreFoundation.CGFloat
  public init(accentColor: UIKit.UIColor = UIColor(red: 0, green: 103/255, blue: 245/255, alpha: 1), fontSizeModifier: CoreFoundation.CGFloat = 0)
}
@objc @_inheritsConvenienceInitializers open class ImagePicker : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func present(on presentationController: UIKit.UIViewController)
  @objc deinit
}
extension IDScanCapture.ImagePicker : UIKit.UIImagePickerControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
extension IDScanCapture.ImagePicker : UIKit.UINavigationControllerDelegate {
}
public struct IDScanIDCaptureResult {
  public let frontImage: UIKit.UIImage?
  public let backImage: UIKit.UIImage?
  public let faceImage: UIKit.UIImage?
  public let trackString: Swift.String?
  public let documentType: Swift.Int
  public let realFaceMode: Swift.Bool
}
public enum IDScanIDCaptureError : Foundation.LocalizedError {
  case configIsInvalid(error: Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol IDScanIDCaptureDelegate : AnyObject {
  func idCaptureResult(sdk: IDScanCapture.IDScanIDCapture, result: IDScanCapture.IDScanIDCaptureResult)
  func idCaptureError(sdk: IDScanCapture.IDScanIDCapture, error: any Swift.Error)
}
public class IDScanIDCapture {
  public var vibroFeedback: Swift.Bool {
    get
    set
  }
  public var logs: Swift.Bool {
    get
    set
  }
  public init(delegate: any IDScanCapture.IDScanIDCaptureDelegate, configuration: [Swift.String : Any], theme: IDScanCapture.IDScanIDCaptureTheme = .init())
  public func start(from rootVC: UIKit.UIViewController, contentInset: UIKit.UIEdgeInsets? = nil)
  public func close()
  @objc deinit
}
